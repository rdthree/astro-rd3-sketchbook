---
// Props define what attributes can be passed to this component
// sketchId: unique identifier for the sketch to load
// renderer: which graphics engine to use (babylon.js, three.js, or p5.js)
interface Props {
    sketchId: string;
    renderer: 'babylon' | 'three' | 'p5';
}

const { sketchId, renderer } = Astro.props;
---

<!-- 
HOW TO USE THIS COMPONENT:
1. Import it in your .astro page: import SketchLoader from '../components/SketchLoader.astro'
2. Use it like this: <SketchLoader sketchId="my-sketch-name" renderer="p5" />
3. Create your sketch file in: src/content/sketches/my-sketch-name.ts (or .js)
-->

<!-- Creates a wrapper div with the appropriate class and data attribute -->
<div class={`${renderer}-sketch`} data-sketch-id={sketchId}>
    <!-- Canvas is auto-created for babylon and three.js, p5.js creates its own -->
    {renderer !== 'p5' && <canvas style="display: block; width: 100%; height: 100%;"></canvas>}
</div>

<script>
    // Import type definitions and renderer setup functions
    import type { SketchInitializer as BabylonSketchInitializer } from '../renderers/babylonRenderer';
    import type { SketchInitializer as ThreeSketchInitializer } from '../renderers/threeRenderer';
    import type { SketchInitializer as P5SketchInitializer } from '../renderers/p5Renderer';
    import { createScene as createBabylonScene } from '../renderers/babylonRenderer';
    import { createScene as createThreeScene } from '../renderers/threeRenderer';
    import { createScene as createP5Scene } from '../renderers/p5Renderer';

    // Define types for renderer selection and sketch initialization
    type RendererType = 'babylon' | 'three' | 'p5';
    type SketchInitializer = BabylonSketchInitializer | ThreeSketchInitializer | P5SketchInitializer;

    // SketchManager handles loading and initializing sketches
    class SketchManager {
        // Start the manager
        async init() {
            await this.initializeExistingSketches();
            this.observeNewSketches();
        }

        // Find and initialize all sketches currently on the page
        private async initializeExistingSketches() {
            // Query for sketch wrappers of each type
            const babylonWrappers = document.querySelectorAll('.babylon-sketch');
            const threeWrappers = document.querySelectorAll('.three-sketch');
            const p5Wrappers = document.querySelectorAll('.p5-sketch');

            // Initialize each type of sketch
            for (const wrapper of Array.from(babylonWrappers)) {
                await this.initializeSketch(wrapper as HTMLElement, 'babylon');
            }
            for (const wrapper of Array.from(threeWrappers)) {
                await this.initializeSketch(wrapper as HTMLElement, 'three');
            }
            for (const wrapper of Array.from(p5Wrappers)) {
                await this.initializeSketch(wrapper as HTMLElement, 'p5');
            }
        }

        // Watch for new sketches added to the page dynamically
        private observeNewSketches() {
            const observer = new MutationObserver(mutations => {
                mutations.forEach(mutation => {
                    if (mutation.type === 'childList') {
                        mutation.addedNodes.forEach(node => {
                            if (node instanceof HTMLElement) {
                                // Look for new sketch wrappers and initialize them
                                const babylonSketches = node.querySelectorAll('.babylon-sketch');
                                const threeSketches = node.querySelectorAll('.three-sketch');
                                const p5Sketches = node.querySelectorAll('.p5-sketch');

                                // Initialize any new sketches found
                                Array.from(babylonSketches).forEach(sketch =>
                                    this.initializeSketch(sketch as HTMLElement, 'babylon')
                                );
                                Array.from(threeSketches).forEach(sketch =>
                                    this.initializeSketch(sketch as HTMLElement, 'three')
                                );
                                Array.from(p5Sketches).forEach(sketch =>
                                    this.initializeSketch(sketch as HTMLElement, 'p5')
                                );
                            }
                        });
                    }
                });
            });

            // Start observing the entire document for changes
            observer.observe(document, { childList: true, subtree: true });
        }

        // Initialize a single sketch with the specified renderer
        private async initializeSketch(wrapper: HTMLElement, rendererType: RendererType) {
            const sketchId = wrapper.dataset.sketchId ?? '';

            try {
                // Load the sketch code
                const sketch = await this.loadSketch(sketchId);
                if (!sketch) return;

                // Initialize the appropriate renderer
                switch(rendererType) {
                    case 'babylon':
                        const canvas = wrapper.querySelector('canvas');
                        if (!canvas) return;
                        const babylonSetup = await createBabylonScene(canvas as HTMLCanvasElement);
                        await (sketch as BabylonSketchInitializer)?.(babylonSetup);
                        break;
                    case 'three':
                        const threeCanvas = wrapper.querySelector('canvas');
                        if (!threeCanvas) return;
                        const threeSetup = await createThreeScene(threeCanvas as HTMLCanvasElement);
                        await (sketch as ThreeSketchInitializer)?.(threeSetup);
                        break;
                    case 'p5':
                        await createP5Scene(wrapper, sketch as P5SketchInitializer);
                        break;
                }
            } catch (error) {
                console.error(`Error initializing sketch ${sketchId}:`, error);
            }
        }

        // Load the sketch code from the content directory
        private async loadSketch(sketchId: string) {
            // Look for sketch files in the content/sketches directory
            const sketches = import.meta.glob('../content/sketches/**/*.{js,ts}');
            const sketchKey = Object.keys(sketches).find(key =>
                key.includes(`/${sketchId}`)
            );
            if (!sketchKey) return;

            try {
                const module = await sketches[sketchKey]();
                return (module as { default?: SketchInitializer }).default;
            } catch (error) {
                console.error(`Error loading sketch ${sketchId}:`, error);
                return null;
            }
        }
    }

    // Create and start the sketch manager
    const manager = new SketchManager();
    manager.init().catch(console.error);
</script>