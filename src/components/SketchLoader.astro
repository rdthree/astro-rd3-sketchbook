---
interface Props {
    sketchId: string;
    renderer: 'babylon' | 'three' | 'p5';
}

const { sketchId, renderer } = Astro.props;
---

<div
        class={`${renderer}-sketch`}
        data-sketch-id={sketchId}
        style="height: 500px; width: 100%; position: relative; overflow: hidden;">
    <canvas style="display: block; width: 100%; height: 100%;"></canvas>
</div>

<script>
    import type { SketchInitializer as BabylonSketchInitializer } from '../renderers/babylonRenderer';
    import type { SketchInitializer as ThreeSketchInitializer } from '../renderers/threeRenderer';
    import type { SketchInitializer as P5SketchInitializer } from '../renderers/p5Renderer';
    import { createScene as createBabylonScene } from '../renderers/babylonRenderer';
    import { createScene as createThreeScene } from '../renderers/threeRenderer';
    import { createScene as createP5Scene } from '../renderers/p5Renderer';

    type RendererType = 'babylon' | 'three' | 'p5';
    type SketchInitializer = BabylonSketchInitializer | ThreeSketchInitializer | P5SketchInitializer;

    class SketchManager {
        async init() {
            await this.initializeExistingSketches();
            this.observeNewSketches();
        }

        private async initializeExistingSketches() {
            const babylonWrappers = document.querySelectorAll('.babylon-sketch');
            const threeWrappers = document.querySelectorAll('.three-sketch');
            const p5Wrappers = document.querySelectorAll('.p5-sketch');

            console.log('Found p5 wrappers:', p5Wrappers.length);

            for (const wrapper of Array.from(babylonWrappers)) {
                await this.initializeSketch(wrapper as HTMLElement, 'babylon');
            }
            for (const wrapper of Array.from(threeWrappers)) {
                await this.initializeSketch(wrapper as HTMLElement, 'three');
            }
            for (const wrapper of Array.from(p5Wrappers)) {
                await this.initializeSketch(wrapper as HTMLElement, 'p5');
            }
        }

        private observeNewSketches() {
            const observer = new MutationObserver(mutations => {
                mutations.forEach(mutation => {
                    if (mutation.type === 'childList') {
                        mutation.addedNodes.forEach(node => {
                            if (node instanceof HTMLElement) {
                                const babylonSketches = node.querySelectorAll('.babylon-sketch');
                                const threeSketches = node.querySelectorAll('.three-sketch');
                                const p5Sketches = node.querySelectorAll('.p5-sketch');

                                Array.from(babylonSketches).forEach(sketch =>
                                    this.initializeSketch(sketch as HTMLElement, 'babylon')
                                );
                                Array.from(threeSketches).forEach(sketch =>
                                    this.initializeSketch(sketch as HTMLElement, 'three')
                                );
                                Array.from(p5Sketches).forEach(sketch =>
                                    this.initializeSketch(sketch as HTMLElement, 'p5')
                                );
                            }
                        });
                    }
                });
            });

            observer.observe(document, { childList: true, subtree: true });
        }

        private async initializeSketch(wrapper: HTMLElement, rendererType: RendererType) {
            const canvas = wrapper.querySelector('canvas');
            if (!canvas) {
                console.error('No canvas found in wrapper');
                return;
            }

            const sketchId = wrapper.dataset.sketchId ?? '';
            console.log(`Loading sketch: ${sketchId} with renderer: ${rendererType}`);

            try {
                const sketch = await this.loadSketch(sketchId);
                if (!sketch) {
                    console.error(`Failed to load sketch: ${sketchId}`);
                    return;
                }

                switch(rendererType) {
                    case 'babylon':
                        const babylonSetup = await createBabylonScene(canvas as HTMLCanvasElement);
                        await (sketch as BabylonSketchInitializer)?.(babylonSetup);
                        break;
                    case 'three':
                        const threeSetup = await createThreeScene(canvas as HTMLCanvasElement);
                        await (sketch as ThreeSketchInitializer)?.(threeSetup);
                        break;
                    case 'p5':
                        console.log('Initializing p5 sketch');
                        const p5Setup = await createP5Scene(canvas as HTMLCanvasElement);
                        if (p5Setup && p5Setup.sketch) {
                            await (sketch as P5SketchInitializer)?.(p5Setup);
                            console.log('P5 sketch initialized successfully');
                        } else {
                            console.error('Failed to create p5 scene');
                        }
                        break;
                }
            } catch (error) {
                console.error(`Error initializing sketch ${sketchId}:`, error);
            }
        }

        private async loadSketch(sketchId: string) {
            const sketches = import.meta.glob('../content/sketches/**/*.ts');
            const sketchKey = Object.keys(sketches).find(key =>
                key.endsWith(`/${sketchId}.ts`)
            );
            if (!sketchKey) {
                console.error(`No sketch found with ID: ${sketchId}`);
                return;
            }

            try {
                const module = await sketches[sketchKey]();
                return (module as { default?: SketchInitializer }).default;
            } catch (error) {
                console.error(`Error loading sketch ${sketchId}:`, error);
                return null;
            }
        }
    }

    const manager = new SketchManager();
    manager.init().catch(console.error);
</script>