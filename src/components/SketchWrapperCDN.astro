---
interface Props {
    src: string;
    id: string;
    type: 'p5' | 'd3' | 'three' | 'babylonjs';
}

const {src, id, type} = Astro.props;

const scripts = import.meta.glob<string>('/src/content/sketches/**/*.{js,ts}', {
    query: '?raw',
    import: 'default'
});

const scriptPath = Object.keys(scripts).find(path => path.endsWith(`/${src}`));
const scriptContent = scriptPath ? await scripts[scriptPath]() : '';

const libraryImports = {
    // TODO: weird error with the jsdelivr esm cdn, but this esm.run thing was in their jsfiddle examples
    //p5: "https://esm.run/p5?name=p5",
    p5: 'https://esm.sh/p5?name=p5',
    //d3: 'https://esm.run/d3?name=d3',
    d3: 'https://esm.sh/d3?name=d3',
    //three: 'https://esm.run/three?name=three',
    three: 'https://cdnjs.cloudflare.com/ajax/libs/three.js/0.170.0/three.module.min.js?name=three',
};
---

<div class={`${type}-container`} id={id}></div>

<script type="module" define:vars={{scriptContent, type, libraryImports}} defer>
    const lib = await import(libraryImports[type]);
    window[type === 'p5' ? 'p5' : type === 'three' ? 'THREE' : 'd3'] = type === 'p5' ? lib.default : lib;

    const script = document.createElement('script');
    script.type = 'module';
    script.textContent = scriptContent;
    document.body.appendChild(script);
</script>