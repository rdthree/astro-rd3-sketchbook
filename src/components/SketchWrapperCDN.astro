---
interface Props {
    src: string;
    id: string;
    type: 'p5' | 'd3' | 'three' | 'babylonjs';
}

const { src, id, type } = Astro.props;

const scripts = import.meta.glob<string>('/src/content/sketches/**/*.{js,ts}', {
    query: '?raw',
    import: 'default'
});

const scriptPath = Object.keys(scripts).find(path => path.endsWith(`/${src}`));
const scriptContent = scriptPath ? await scripts[scriptPath]() : '';

const libraryImports = {
    p5: "https://cdn.jsdelivr.net/npm/p5@1.11.0/+esm?name=p5",
    d3: 'https://cdn.jsdelivr.net/npm/d3@7.9.0/+esm?name=d3',
    three: 'https://cdn.jsdelivr.net/npm/three@0.169.0/+esm?name=three',
};
---

<div class={`${type}-container`} id={id}></div>

<script type="module" define:vars={{ scriptContent, type, libraryImports }}>
    const lib = await import(libraryImports[type]);
    window[type === 'p5' ? 'p5' : type === 'three' ? 'THREE' : 'd3'] = type === 'p5' ? lib.default : lib;

    const script = document.createElement('script');
    script.type = 'module';
    script.textContent = scriptContent;
    document.body.appendChild(script);
</script>