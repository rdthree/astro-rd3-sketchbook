---
interface Props {
    sketchId: string;
}

const { sketchId } = Astro.props;
---

<div class="babylon-sketch" data-sketch-id={sketchId}>
    <canvas style="width: 100%; height: 100%"></canvas>
</div>

<script>
    import type { SketchInitializer, Babylon } from '../renderers/babylonRenderer';
    import { getBabylon } from '../renderers/babylonRenderer';
    let babylon: Babylon | undefined;

    initBabylon().catch((error) => console.error('Error loading Babylon', error));

    async function initBabylon() {
        babylon = await getBabylon();

        // Initialize all existing wrappers
        await initializeBabylonSketches(document);

        // Register a MutationObserver to initialize new wrappers
        const observer = new MutationObserver((mutations) => {
            for (const mutation of mutations) {
                if (mutation.type === 'childList') {
                    for (const node of Array.from(mutation.addedNodes)) {
                        initializeBabylonSketches(node as ParentNode);
                    }
                }
            }
        });
    }

    async function initializeBabylonSketches(container: ParentNode | Document) {
        const wrappers = Array.from(container.querySelectorAll?.('.babylon-sketch') ?? []);
        for (const wrapper of wrappers) {
            await initializeBabylonSketch(wrapper as HTMLElement);
        }
    }

    async function initializeBabylonSketch(wrapper: HTMLElement) {
        if (!babylon) throw new Error('Babylon.js not loaded');
        const sketchId = wrapper.dataset.sketchId ?? '';
        const sketches = import.meta.glob('../content/sketches/**/*.ts');
        const sketchKey =
            Object.keys(sketches).find((key) => key.endsWith(`/${sketchId}.ts`)) ?? '';
        const initSketch = (
            ((await sketches[sketchKey]?.()) ?? {}) as { default?: SketchInitializer }
        ).default;
        if (!initSketch) throw new Error(`Sketch not found: ${sketchId}`);

        // Initialize Babylon.js scene and engine
        const canvas = wrapper.querySelector('canvas') as HTMLCanvasElement;
        if (!canvas) throw new Error('Canvas not found');
        const { Engine, Scene, ArcRotateCamera, Vector3 } = babylon;
        const engine = new Engine(canvas, true);
        const scene = new Scene(engine);

        // Create camera
        const camera = new ArcRotateCamera(
            'Camera',
            Math.PI / 2,
            Math.PI / 2,
            2,
            Vector3.Zero(),
            scene
        );
        camera.attachControl(canvas, true);

        // Call the registered sketch initializer function
        await initSketch({ scene, ...babylon });

        // Run the render loop
        engine.runRenderLoop(() => {
            scene.render();
        });
        // Handle window resize
        window.addEventListener('resize', () => {
            engine.resize();
        });
    }
</script>
